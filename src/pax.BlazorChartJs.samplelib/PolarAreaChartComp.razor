@using pax.BlazorChartJs

<h3>PolarAreaChartPage</h3>

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="ShowChart">ShowChart</button>
    <button type="button" class="btn btn-primary" @onclick="Randomize">Randomize</button>
    <button type="button" class="btn btn-primary" @onclick="AddData">AddData</button>
    <button type="button" class="btn btn-primary" @onclick="RemoveLastDataFromDatasets">RemoveData</button>
    <button type="button" class="btn btn-primary" @onclick="EnableAnimations">EnabelAnimations</button>
    <button type="button" class="btn btn-primary" @onclick="DisableAnimation">DisableAnimations</button>
</div>

<div class="w-50">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig"></ChartComponent>
</div>

@code {
    ChartComponent? chartComponent;
    ChartJsConfig chartJsConfig = null!;

    protected override void OnInitialized()
    {
        chartJsConfig = new()
            {
                Type = ChartType.polarArea,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                        "Red", "Blue", "Yellow", "Green", "Purple", "Orange"
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                        new PolarAreaDataset()
                        {
                            Data = new List<object>() { 12, 19, 3, 5, 2, 3 },
                            BackgroundColor = new IndexableOption<string>(new List<string>()
                            {
                                "rgba(255, 99, 132, 0.2)",
                                "rgba(54, 162, 235, 0.2)",
                                "rgba(255, 206, 86, 0.2)",
                                "rgba(75, 192, 192, 0.2)",
                                "rgba(153, 102, 255, 0.2)",
                                "rgba(255, 159, 64, 0.2)",
                            }),
                            BorderColor = new IndexableOption<string>(new List<string>()
                            {
                                "rgba(255, 99, 132, 1)",
                                "rgba(54, 162, 235, 1)",
                                "rgba(255, 206, 86, 1)",
                                "rgba(75, 192, 192, 1)",
                                "rgba(153, 102, 255, 1)",
                                "rgba(255, 159, 64, 1)",
                            }),
                            BorderWidth = new IndexableOption<double>(1),
                            Circular = new IndexableOption<bool>(true)
                        }
                    }
                },
                Options = new ChartJsOptions()
                {
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Position = "right"
                        }
                    }
                }

            };
        base.OnInitialized();
    }

    public void ShowChart()
    {
        chartComponent?.DrawChart();
    }

    private void Randomize()
    {
        var data = ChartUtils.GetRandomData(chartJsConfig.Data.Datasets.Count, chartJsConfig.Data.Labels.Count, 0, 100);

        Dictionary<ChartJsDataset, SetDataObject> chartData = new();

        for (int i = 0; i < chartJsConfig.Data.Datasets.Count; i++)
        {
            var dataset = chartJsConfig.Data.Datasets.ElementAt(i);
            var dataList = data.ElementAt(i);
            chartData.Add(dataset, new SetDataObject(dataList));
        }
        chartJsConfig.SetData(chartData);
    }

    private void AddData()
    {
        var dataAddEventArgs = ChartUtils.GetRandomData(chartJsConfig.Data.Datasets.Count, 0, 100);
        
        Dictionary<ChartJsDataset, AddDataObject> data = new Dictionary<ChartJsDataset, AddDataObject>();
        for (int i = 0; i < chartJsConfig.Data.Datasets.Count; i++)
        {
            ChartJsDataset dataset = chartJsConfig.Data.Datasets[i];
            data.Add(dataset, new AddDataObject(dataAddEventArgs.Data[i]));
        }

        chartJsConfig.AddData(dataAddEventArgs.Label, null, data);
    }

    private void RemoveLastDataFromDatasets()
    {
        chartJsConfig.RemoveData();
    }

    private void DisableAnimation()
    {
        if (chartJsConfig.Options != null)
        {
            chartJsConfig.Options.Animation = false;
            chartComponent?.UpdateChartOptions();
        }
    }

    private void EnableAnimations()
    {
        if (chartJsConfig.Options != null)
        {
            chartJsConfig.Options.Animation = null;
            chartComponent?.UpdateChartOptions();
        }
    }
}
