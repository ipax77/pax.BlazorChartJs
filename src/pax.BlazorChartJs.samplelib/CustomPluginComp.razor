@using Microsoft.JSInterop
@using pax.BlazorChartJs
@using System.Text.Json
@implements IDisposable

@inject IJSRuntime jsRuntime

<h3>CustomPlugin <a href="https://github.com/chartjs/chartjs-plugin-annotation">chartjs-plugin-annotation</a></h3>

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="RegisterPlugin">RegisterPlugin</button>
    <button type="button" class="btn btn-primary" @onclick="DrawChart">Draw</button>
</div>

<div class="w-75">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartConfig" OnEventTriggered="EventTriggered"></ChartComponent>
</div>

@code {
    private Lazy<Task<IJSObjectReference>>? moduleTask;
    CustomChartJsConfig chartConfig = null!;
    ChartComponent? chartComponent;

    protected override void OnInitialized()
    {
        moduleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>(
        "import", "/customPlugin.js").AsTask());
        base.OnInitialized();

        chartConfig = new CustomChartJsConfig()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>() { "January", "February", "March", "April", "May", "June", "July" },
                    Datasets = new List<ChartJsDataset>()
                    {
                        new LineDataset() {
                            Label = "My First Dataset",
                            Data = new List<object>() { 65, 59, 80, 81, 56, 55, 40 },
                            Fill = false,
                            BorderColor = "rgb(75, 192, 192)",
                            Tension = 0.1
                        }
                    },
                },
                Options = new CustomChartJsOptions()
                {
                    Animation = new Animation()
                    {
                        OnCompleteEvent = true
                    }
                }
            };
    }

    private async void EventTriggered(ChartJsEvent chartJsEvent)
    {
        //if (chartJsEvent is ChartJsInitEvent initEvent)
        //{
        //    await RegisterPlugin();
        //    DrawChart();
        //}
        if (chartJsEvent is ChartJsAnimationCompleteEvent animationEvent)
        {
            if (animationEvent.Initial)
            {
                await RegisterPlugin();
                DrawChart();
            }
        }
    }

    private async Task RegisterPlugin()
    {
        if (moduleTask != null)
        {
            var module = await moduleTask.Value.ConfigureAwait(false);
            await module.InvokeVoidAsync("regsisterPlugin")
                .ConfigureAwait(false);
        }
    }

    private void DrawChart()
    {
        chartConfig.Options = new CustomChartJsOptions()
            {
                Plugins = new CustomPlugins()
                {
                    Annotation = new AnnotationsSettings()
                    {
                        Common = new AnnotationCommon()
                        {
                            DrawTime = "afterDraw"
                        },
                        Annotations = new Dictionary<string, object>()
                        {
                            { "box1", new BoxAnimation()
                                {
                                    Type = "box",
                                    XMin = 1,
                                    XMax = 2,
                                    YMin = 50,
                                    YMax = 70,
                                    BackgroundColor = "rgba(255, 99, 132, 0.25)"
                                }
                            }
                        }
                    }
                }
            };

        chartComponent?.DrawChart();
    }

    public class CustomChartJsConfig : ChartJsConfig
    {
        public new CustomChartJsOptions? Options { get; set; }
    }

    public record CustomChartJsOptions : ChartJsOptions
    {
        public new CustomPlugins? Plugins { get; set; }
    }

    public record CustomPlugins : Plugins
    {
        public AnnotationsSettings? Annotation { get; set; }
    }

    public record AnnotationsSettings
    {
        public AnnotationCommon? Common { get; set; }
        public Dictionary<string, object>? Annotations { get; set; }
    }

    public record AnnotationCommon
    {
        public string? DrawTime { get; set; }
    }

    public record BoxAnimation
    {
        public string? Type { get; set; }
        public double? XMin { get; set; }
        public double? XMax { get; set; }
        public double? YMin { get; set; }
        public double? YMax { get; set; }
        public string? BackgroundColor { get; set; }

    }

    public void Dispose()
    {
        if (moduleTask != null && moduleTask.IsValueCreated)
        {
            var module = moduleTask.Value.GetAwaiter().GetResult();
            module.DisposeAsync();
        }
    }
}
