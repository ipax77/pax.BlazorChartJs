@using Microsoft.AspNetCore.Components.Forms;
@using pax.BlazorChartJs
@using Microsoft.JSInterop

@inject IJSRuntime jsRuntime
@implements IDisposable

<h3>TimeChart</h3>

<div>
    <EditForm EditContext="editContext">
        <div class="row">
            <div class="col-auto">
                <label class="col-form-label">
                    StartDate
                    <InputDate id="inputstartdate" class="form-control" @bind-Value="timeOptions.Start" />
                </label>
            </div>
            <div class="col-auto">
                <label class="col-form-label">
                    EndDate
                    <InputDate class="form-control" @bind-Value="timeOptions.End" />
                </label>
            </div>
        </div>
    </EditForm>
</div>

<div class="chart-container w-75">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartConfig" OnEventTriggered="EventTriggered"></ChartComponent>
</div>

@code {
    private Lazy<Task<IJSObjectReference>>? moduleTask;
    ChartJsConfig chartConfig = null!;
    public ChartComponent? chartComponent;
    private bool isRegistered = false;

    EditContext editContext = null!;
    TimeOptions timeOptions = new();

    DateTime startDate = new DateTime(2022, 09, 07);
    DateTime enddate = new DateTime(2022, 10, 01);

    protected override void OnInitialized()
    {
        editContext = new(timeOptions);
        editContext.OnFieldChanged += FieldChanged;

        moduleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>(
        "import", "./_content/pax.BlazorChartJs.samplelib/timeChart.js").AsTask());

        chartConfig = new ChartJsConfig()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Datasets = new List<ChartJsDataset>()
                    {
                        new LineDataset() {
                            Label = "My First Dataset",
                            Data = new List<object>()
                            {
                                new { x = "2022-09-07", y = 20 },
                                new { x = "2022-09-08", y = 40 },
                                new { x = "2022-09-09", y = 20 },
                                new { x = "2022-09-10", y = 60 },
                                new { x = "2022-09-11", y = 70 },
                                new { x = "2022-09-12", y = 20 },
                                new { x = "2022-09-13", y = 10 },
                                new { x = "2022-09-14", y = 50 },
                                new { x = "2022-09-15", y = 30 },
                                new { x = "2022-10-01", y = 30 },
                            },
                            Fill = false,
                            BorderColor = "rgb(75, 192, 192)",
                            Tension = 0.1
                        }
                    },
                }
            };
        base.OnInitialized();
    }

    private async void EventTriggered(ChartJsEvent chartJsEvent)
    {
        if (chartJsEvent is ChartJsInitEvent initEvent)
        {
            await RegisterPlugin();
        }
    }

    private async Task RegisterPlugin()
    {
        if (moduleTask != null && !isRegistered)
        {
            var module = await moduleTask.Value.ConfigureAwait(false);
            await module.InvokeVoidAsync("registerPlugin")
                .ConfigureAwait(false);

            isRegistered = true;

            chartConfig.Options = new ChartJsOptions()
                {
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new TimeCartesianAxis()
                        {
                            Type = "time",
                            Time = new TimeCartesianAxisTime()
                            {
                                Unit = "day"
                            }
                        }
                    }
                };
            chartConfig.ReinitializeChart();
        }
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (timeOptions.Start < startDate)
        {
            return;
        }

        if (timeOptions.End > enddate)
        {
            return;
        }

        if (timeOptions.Start > timeOptions.End)
        {
            timeOptions.End = timeOptions.Start.AddDays(1);
        }

        if (chartConfig.Options?.Scales?.X != null
            && chartConfig.Options?.Scales?.X is TimeCartesianAxis timeAxis)
        {
            timeAxis.Min = timeOptions.Start.ToString("yyyy-MM-dd");
            timeAxis.Max = timeOptions.End.ToString("yyyy-MM-dd");
            chartConfig.UpdateChartOptions();
        }
    }

    public void Dispose()
    {
        if (moduleTask != null && moduleTask.IsValueCreated)
        {
            var module = moduleTask.Value.GetAwaiter().GetResult();
            module.DisposeAsync();
        }
        editContext.OnFieldChanged -= FieldChanged;
    }

    public record TimeOptions
    {
        public DateTime Start { get; set; } = new DateTime(2022, 09, 07);
        public DateTime End { get; set; } = new DateTime(2022, 10, 01);
    }
}