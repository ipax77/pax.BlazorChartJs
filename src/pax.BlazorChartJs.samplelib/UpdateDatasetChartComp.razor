@using pax.BlazorChartJs

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="Randomize">Randomize</button>
    <button type="button" class="btn btn-primary" @onclick="UpdateDataset">UpdateDataset</button>
    <button type="button" class="btn btn-primary" @onclick="ResetDataset">ResetDataset</button>
    <button type="button" class="btn btn-primary" @onclick="UpdateDataset2">UpdateDataset2</button>
</div>
<div class="chart-container w-75">
    <ChartComponent @ref="chartComponent"
                    ChartJsConfig="chartJsConfig"
                    OnEventTriggered="ChartEventTriggered">
    </ChartComponent>
</div>

@code {
    ChartJsConfig chartJsConfig = null!;
    ChartComponent? chartComponent;
    private bool chartReady;

    protected override void OnInitialized()
    {
        chartJsConfig = new ChartJsConfig()
            {
                Type = ChartType.bar,
                Data = new ChartJsData()
                {
                    Labels = ["Jan", "Feb", "Mar"],
                    Datasets = new List<ChartJsDataset>()
                    {
                        new BarDataset()
                        {
                            Label = "Dataset 1",
                            Data = [ 1, 2, 3 ],
                            BorderColor = "slateblue",
                            BackgroundColor = "dodgerblue",
                            BorderWidth = 1
                        }
                    }
                }
            };
        base.OnInitialized();
    }

    private void ChartEventTriggered(ChartJsEvent chartJsEvent)
    {
        if (chartJsEvent is ChartJsInitEvent initEvent)
        {
            chartReady = true;
        }
    }

    private void Randomize()
    {
        if (!chartReady)
        {
            return;
        }

        foreach (var dataset in chartJsConfig.Data.Datasets)
        {
            if (dataset is BarDataset barDataset)
            {
                int dataCount = barDataset.Data.Count;
                List<int> newData = [];
                for (int i = 0; i < dataCount; i++)
                {
                    newData.Add(Random.Shared.Next(1, 100));
                }
                barDataset.Data = newData.Cast<object>().ToList();
            }
        }
        chartJsConfig.UpdateDatasetsSmooth(chartJsConfig.Data.Datasets);
    }

    private void UpdateDataset()
    {
        if (!chartReady)
        {
            return;
        }

        foreach (var dataset in chartJsConfig.Data.Datasets)
        {
            if (dataset is BarDataset barDataset)
            {
                barDataset.Data = [3, 2, 1];
                barDataset.BorderColor = [ "darkred", "blue", "yellow" ];
                barDataset.BackgroundColor = [ "red", "lightblue", "lightyellow" ];
                barDataset.BorderWidth = 3;
            }
            chartJsConfig.UpdateDatasetSmooth(dataset);
        }
    }

    private void ResetDataset()
    {
        if (!chartReady)
        {
            return;
        }

        foreach (var dataset in chartJsConfig.Data.Datasets)
        {
            if (dataset is BarDataset barDataset)
            {
                barDataset.Data = [1, 2, 3];
                barDataset.BorderColor = ["slateblue", "slateblue", "slateblue"];
                barDataset.BackgroundColor = ["dodgerblue", "dodgerblue", "dodgerblue"];
                barDataset.BorderWidth = 1;
                barDataset.BarPercentage = null;
                barDataset.BarThickness = null;
                barDataset.MaxBarThickness = null;
                barDataset.MinBarLength = null;
            }
            chartJsConfig.UpdateDatasetSmooth(dataset);
        }
    }

    private void UpdateDataset2()
    {
        if (!chartReady)
        {
            return;
        }

        foreach (var dataset in chartJsConfig.Data.Datasets)
        {
            if (dataset is BarDataset barDataset)
            {
                barDataset.Data = [3, 2, 1];
                barDataset.BorderColor = [ "darkred", "blue", "yellow" ];
                barDataset.BackgroundColor = [ "red", "lightblue", "lightyellow" ];
                barDataset.BorderWidth = 3;
                barDataset.BarPercentage = 0.5;
                barDataset.BarThickness = 22;
                barDataset.MaxBarThickness = 22;
                barDataset.MinBarLength = 2;

            }
            chartJsConfig.UpdateDatasetSmooth(dataset);
        }
    }
}