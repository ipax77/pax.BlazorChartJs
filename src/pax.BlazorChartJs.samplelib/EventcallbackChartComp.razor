@using pax.BlazorChartJs
@using Microsoft.JSInterop

@inject IJSRuntime jsRuntime
@implements IDisposable

<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="Randomize">Randomize</button>
</div>
<div class="chart-container w-75">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig" OnEventTriggered="ChartEventTriggered">
    </ChartComponent>
</div>

@code {
    ChartJsConfig chartJsConfig = null!;
    ChartComponent? chartComponent;
    private bool chartReady;
    private Lazy<Task<IJSObjectReference>>? moduleTask;
    protected override void OnInitialized()
    {
        moduleTask = new(() => jsRuntime.InvokeAsync<IJSObjectReference>(
        "import", "./_content/pax.BlazorChartJs.samplelib/callbackChart.js").AsTask());

        chartJsConfig = new ChartJsConfig()
            {
                Type = ChartType.bar,
                Data = new ChartJsData()
                {
                    Labels = new List<string>() { "Jan", "Feb", "Mar" },
                    Datasets = new List<ChartJsDataset>()
                    {
                        new BarDataset()
                        {
                        Label = "Dataset 1",
                        Data = new List<object>() { 1, 2, 3 }
                        }
                    }
                },
                Options = new ChartJsOptions()
                {
                    Plugins = new Plugins()
                    {
                        Title = new Title() 
                        {
                            Display = true,
                            Text = new IndexableOption<string>("Add \"$\" to y-axis ticks")
                        }
                    }
                }
        };
        base.OnInitialized();
    }

    private void ChartEventTriggered(ChartJsEvent chartJsEvent)
    {
        if (chartJsEvent is ChartJsInitEvent initEvent)
        {
            chartReady = true;
            _ = SetTickCallback();
        }
    }

    private async Task SetTickCallback()
    {
        if (moduleTask is null)
        {
            return;
        }
        var module = await moduleTask.Value.ConfigureAwait(false);
        await module.InvokeVoidAsync("setTickCallback", chartJsConfig.ChartJsConfigGuid)
            .ConfigureAwait(false);
    }

    private void Randomize()
    {
        if (!chartReady)
        {
            return;
        }

        Dictionary<ChartJsDataset, SetDataObject> chartData = new();

        foreach (var dataset in chartJsConfig.Data.Datasets)
        {
            if (dataset is BarDataset barDataset)
            {
                List<object> newData = new();
                foreach (var data in barDataset.Data)
                {
                    newData.Add(Random.Shared.Next(1, 10));
                }
                chartData[dataset] = new(newData);
            }
        }
        chartJsConfig.SetData(chartData);
    }

    public void Dispose()
    {
        if (moduleTask is not null && moduleTask.IsValueCreated)
        {
            var module = moduleTask.Value.GetAwaiter().GetResult();
            module.DisposeAsync();
        }
    }
}
